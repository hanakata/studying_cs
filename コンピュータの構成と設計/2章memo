第2章 命令：コンピュータの言葉

コンピュータ言語の言葉＝命令
コンピュータ言語の語彙＝命令セット

命令セットは大体似ている。理由は以下
・同じ根本原理に基づくハードウエア技術を用いて作られている
・基本的な計算機能が同じ
・設計者が共通の目標を持っている
共通の目標＝装置が単純で高度な処理が可能

■コンピュータハードウエアの演算
すべてのコンピュータは算術演算を行えなければならない
add a,b,c
これはMIPSの加算であり、bとcの和をaに保存すると言う意味。
加算に対するオペランドは3つであり、足す2つの数とそれを収める1つの変数。
ハードウェアの設計に関する基本原則その1
・単純性は規則性に繋がる

■コンピュータハードウエアのオペランド
高水準言語とは異なり算術命令のオペランドには制約がある。
算術命令のオペランドはハードウェアに直接組み込まれている特殊な記憶領域の
中から選んで使用しなければならない→その記憶領域をレジスタと呼ぶ。
変数とレジスタの違いは数が限定されていること（レジスタは32個）
限られている理由は基本原則にある。
ハードウェアの設計に関する基本原則その2
・小さければ小さいほど高速になる

配列に含まれる要素がレジスタの数を超える場合どうするか
→メモリに膨大な量のデータを記憶できるのでメモリ内に保持する。
そのメモリに保存したデータとレジストリとのやり取りのために
データ転送命令が存在する。
呼び出す方をロード、その逆をストアと呼ぶ。
コンパイラはこのロード、ストアの頻度を確認して利用頻度の低い変数をメモリ上に置く。
→レジスタをスピルアウトすると言う。

■符号付き数と符号なし数
コンピュータ内では数字を2進数で扱う。
通常、2進数は無限に続くものではあるがコンピュータの場合ハードウェアの制限で有限。
計算結果がハードウェアに用意されているビット幅に収まらない場合オーバーフローが発生したと呼ぶ。
発生時の措置はそれぞれによって異なる。
2進数で正負を判断する簡単な方法は1ビットで表現できる符号を別に追加すること
→符号付き絶対値と呼ぶ。
符号付き絶対値の欠陥
・符号ビットを右にすべきか左にすべきか
・計算結果の符合を設定するために加算器に余分なステップが必要
・ゼロに正と負の両方がある
この結果、最近使われない。
現在は符号なし。
非常に大きな数を小さな数に足すと上位は1になる。その逆は0なので正負が分かる。
上位が1になるものを負、0になるものを正となる。正負はともにXORの関係になる。

符号付きおよびなしの表現はロードにも利用される。符号付きロードといった場合、
その操作はレジスタ上位の空きビットに符号ビットを繰り返しコピーして埋める符号拡張と呼ぶ処理を行う。

■コンピュータ内での命令の表現
コンピュータ内では命令も高と低の電気信号系列で保持されるので
数値として表現することが可能。レジスタは命令で使用されるのでレジスタ名と番号を対応させる規約がある。
命令を表記する枠取りを命令形式と呼ぶ。
命令を数値で表したものをマシン語と呼びその命令を連ねたものをマシンコードと呼ぶ。
2進数だと長いので16進数に直して表現することがほとんど。
MIPSには各命令のフィールドに名前がついている
op:命令の基本操作
rs:第一のソースオペランドのレジスタ
rt:第二のソースオペランドのレジスタ
rd:デスティネーションオペランドのレジスタ。つまり結果の保存先。
shamt:シフト量
funct:機能、命令操作フィールドのバリエーションを表す。
設計原則3:優れた設計には適度な妥協が必要である

今日のコンピュータは以下2つの基本原理に基づいて設計されている
1.命令は数値として表現される
2.プログラムをメモリ内に格納してデータと同様に読み書きすることが出来る。

■論理演算
ビットに対する操作は以下のものがある
・シフト：ビットをずらす。例えば4ビット左にずらすと2の4乗＝16を掛けたものと同じ結果が得られる。
・AND:2つの操作対象ビットがともに1である場合に1、そうでない場合0になる
・OR:どちらかが1であれば1
・NOT:0なら1、1なら0、オペランドを合わせるためにNORというのも導入。

■条件判定用の命令
コンピュータと電卓の違いの1つとして条件判定能力があるか否か
2つの値を比較し同じ、もしくは違うときに分岐させる。
分岐先を指定するのはgoto。
ループも同様に重要。
末尾に分岐がある命令列はコンパイルする上で非常に重要なので基本ブロックと呼ばれている。

変数同士を比較するための命令も存在する。
この場合、第一のレジスタの値と第二のレジスタの値を比較し第一のレジスタの方が小さい場合、
第三のレジスタに1を設定し、そうでなければ0を設定する。
比較命令は符号付きと符号なしの2通りの数値に対応する必要がある。
その場合、符号の有無をチェックした上で比較する。

case/switch文も用意されている言語が多い。
これを実現するための最も簡単な方法はif-then-else構文をいくつも繋げること。
もうひとつはそれぞれの場合の処理を表にしてそのどれを行うかインデックスにしたがって
処理へジャンプさせる方法がある。

■コンピュータハードウエア内での手続きのサポート
手続きないし関数はプログラムを構成する1つの方法
手続きはソフトウェアにおいて抽象化を実現する1つの方法。
手続きを実行する場合、プログラムは以下6つの手順を踏む
1.手続きからアクセスできる場所にパラメータを置く
2.手続きに制御を移す
3.手続きに必要なメモリ資源を入手する
4.必要なタスクを実行する
5.呼び出し元のプログラムからアクセスできる場所に結果を置く
6.制御を元の位置に戻す

手続きのためにコンパイラが必要とするレジスタの数が4つを超えた場合、
スタックを利用する。
入れ子になった手続きや再帰的な手続きを実装する場合でもスタックは利用できる。

Cの変数は記憶内の1つのロケーションであり解釈はタイプと記憶クラスがある。
記憶クラスは自動変数と静的変数があり自動変数は手続き内のみ、静的変数は
手続きを超えて存在する。staticとかで定義されるものも静的変数。

手続き内の変数ではあるがレジスタに割付られないものを格納する場合もスタックを使う。
そういった手続きによって退避されたレジスタおよびローカル変数を保存している場所を
手続きフレーム、アクティベーションレコードと呼ぶ。

■人との情報交換
ユニコード：大部分の自然言語の文字体系を普遍的にコード化したもの。16ビットで1文字を表す。

■32ビットの即値およびアドレスに対するMIPSのアドレッシング方式
定数は小さいことが多く16ビットで収まることが多いが、時には超えることもある。
なのでloadupper immediate命令(定数の上位16ビットをレジスタに入れる命令)が存在する。
コンパイラもしくはアセンブラのどちらかがこういった処理を受け持つ必要がある。

単純なアドレッシングはジャンプ命令(J形式)
例えば10000番地にジャンプする必要がある場合、
ジャンプ命令6ビット、番地設定26ビットと出来るが
$s0≠$s1の場合、Exitへ分岐となった場合
命令6ビット、第一オペランド5ビット、第二オペランド5ビットとなり、
実際の分岐アドレスへは16ビットしか残らない。
それではあまりに小さいのでプログラムカウンタ値を用意することにしている。
計算式は
プログラムカウンタ値＝レジスタ値＋分岐先アドレス
MIPSのアドレッシングモードのまとめ
即値アドレシング：命令中に指定した定数をオペランドとする
レジスタアドレシング：オペランドにレジスタを取る
ベース相対アドレシング：命令中に指定した定数とレジスタの和によってオペランドが記憶されているメモリの位置を示す
PC相対アドレシング：PCと命令中に指定した定数の和によってアドレスを示す
擬似直接アドレシング：命令中の26ビットとPCの上位ビットを連結したものがジャンプアドレスとなる

機械語からアセンブリ言語に戻したい場合
最初のステップ：16進数を2進数に変換してopフィールドを見つける
そのほかの部分を復号化するにはフィールドを見る。それぞれどのレジスタを表すか分かればアセンブリ言語に復元できる。

■並列処理と命令：同期
タスクが相互に独立しているときは並列実行は難しくない。
協調動作を必要とした場合、非常に難しくなる。
ロックとアンロックを利用することで相互排除は可能。
実装方法としてはレジスタ内に値を設定する。例えば1を設定しているところへ
書き込みを実行使用とした場合、チェック時に1が返ってくるのでロックしていると分かり書き込みを行わない。
0を返した場合、返した時点で1に書き換わるので同時に0が返ることはない

■プログラムの翻訳と起動
プログラムが経由する論理的な4つの段階
1.コンパイラ
コンパイラはプログラムをアセンブリ言語に翻訳する
2.アセンブラ
アセンブリ言語命令を機械語に変換する
3.リンカ
リンカの処理は以下の通り
  コードモジュール及びデータモジュールをメモリ中に置く
  データおよび命令のラベルアドレスを判定する
  内部および外部の参照先を解明する
リンカがあることによって1行変更した場合、該当する手続きのみをコンパイル、アセンブリすることで
動作するようになる。
4.ローダ
実行ファイルをOSがメモリに読み込んで起動

Javaの場合、目標の1つにいかなるコンピュータ上でもすばやく安全に実行できることを掲げているので
Cとは動作が違う
Javaプログラムがコンパイルされクラスファイルが作成される。
それとJavaメソッド、ライブラリがJava仮想マシン(JVM)に呼び出され実行される。

■配列とポインタの対比
配列インデックス版の手続きの場合、ループ中でのアドレス計算のため乗算と加算を行う必要がある。
ポインタ版はポインタを直接繰上げできるためシフトによる乗算と配列アドレスの加算をループの外に出せる
ので乗算の代わりにシフトを利用でき、ループ内での配列アドレス計算を外に出せることによって無駄を削減している。

■誤信と落とし穴
誤信：命令を強力にすれば性能が改善される
複雑な命令よりもアルゴリズムを変更する方が大きく改善される
誤信：最高の性能を実現するためにプログラムをアセンブリ言語で組むこと
コンパイラが優秀なので勝つことはほぼ無理。
勝てたとしてもコーディングとデバッグに時間がかかりすぎる。
勝とうとするならパイプライン処理や記憶階層の概念を完全に理解する必要がある。
誤信：バイナリ互換性の商業的な重要性は成功を収めた命令セットは変化しないことを意味する。
バイナリレベルの後方互換性は犯すべきではない。
ただ拡大は大きい（月1ペースで命令が増える）
落とし穴：バイトアドレシング方式を用いるマシンの一連の語のアドレスは1つずつ増えるのではないことを忘れる
落とし穴：自動変数へのポインタをそれが定義された手続き外で使うこと