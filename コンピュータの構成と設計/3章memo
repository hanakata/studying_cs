第3章 コンピュータにおける算術演算

■加算と減算
加算はコンピュータで行う自然な演算。
減算は引く数を正負反対にして足す演算

加算、減算の場合正同士、負同士の場合でのみオーバフローが発生する。
符号なし加算、符号なし即値加算、減算ではオーバフローは発生するが例外は発生しない。
基本的にオーバフローを検出する何らかの手段をコンピュータは備えている。

■乗算
基本的に桁数を超える場合が多い。
以下のステップにて乗算を行う。
1.取り上げた乗数の数字が1の場合は単に非乗数と同じ値を適切な位置に書き記す
2.取り上げた乗数の数字が0の場合は０を適切な位置に書き記す
乗算は各ビットごとに3つのステップを踏む
1.乗数の最下位意ビットの値に応じて非乗数を積レジスタに加えるか判断する
2.左シフトは中間結果を左へずらす働きをする
3.右シフトによって次の処理サイクルで対象となる乗数の次のビットを得る
これを32回繰り返す。

符号付の場合、一旦符号は無視して計算し符号が違っていたら符号を負にする

■除算
除算は被除数を除数で除すと商と剰余が得られる。
それぞれの関係式は以下
被除数＝商×除数＋剰余
計算の開始に先立って除数が被除数より小さいことを見分けられないので
最初のステップにおいて被除数から除数を引くことで比較する。
結果が正なら商に1を、負であれば商に0をたてる。
除数を右にシフトしてふただび処理を繰り返す。

符号がある場合、除数と被除数の符号が異なる場合は商の符号を反転させる。

■浮動小数点演算
科学記数法は小数点の左側には数字を1つしかかかない。
この科学記数法で書いた数値を浮動小数点と呼ぶ。

※仮数とは浮動小数点形式において仮数フィールドに入れられる数値

浮動小数点加算
以下のステップで加算する
1.正しく加算するには両方の数値の小数点位置を合わせる必要がある。
  なので小さい方の形式を大きい方に合わせる。
2.加算する
3.正規化した科学記数法の形をしていないのであわせる。
4.四捨五入をして桁数を合わせる。

浮動小数点乗算
1.積の指数は両方の演算対象の指数を加えることによって算出する。
2.仮数を掛け合わせる
3.正規化する
4.四捨五入して桁数を合わせる
5.符号をあわせる

演算の正確性として、浮動小数点形式はあくまで近似値しかとることが出来ない。
望ましい近似値を得るためにいくつか丸めモードを持っている。

コンピュータで扱う数値と実際の数値の相違点はコンピュータで扱う数値はデータ長が有限であることから
近似値しか扱うことが出来ないということ

■並列処理とコンピュータの算術演算：半語並列性
デスクトップマイクロプロセッサはグラフィックディスプレイを備えている＝定義上
処理は重い＝並列処理（半語並列性とかデータレベル並列性とか呼ばれる）

■誤信と落とし穴
誤信：左シフト命令が2のべき乗を整数に乗ずる働きがあるのと同様に右シフト命令には2のべき乗で整数を割る働きがある
符号付きの場合は正しい、ない場合は間違い。
落とし穴：浮動小数点数の加算には結合則が当てはまらない
誤信：整数データ型に有効な並列処理戦略は浮動小数点データ型にも有効である
整数の場合は結合則が当てはまるが浮動小数点の場合近似値なので結合則が当てはまらない。なので有効ではない
落とし穴：MIPSの符号なし即値加算命令は16ビットの即値フィールドを符号拡張する
誤信：浮動小数点形式の演算精度をきにするのは理論数学者だけである
以前CPUの実装でバグがあったことによる問題が発生している。＝理論数学者だけではない。
