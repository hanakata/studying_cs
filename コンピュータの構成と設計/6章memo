6章クライアントからクラウドまでの並列プロセッサ

■並列処理プログラム作成の困難さ
並列処理による難しさはハードウエアではない。
並列処理プログラムは現在あまりにも少ない。
理由
・ハードウエア側の革新により効率が上がるので変わらず逐次実行されるプログラムでも早くなっていく
・並列にすることによる課題が大量にある（分担、スケジューリング、同期など）

速度向上について問題の規模の拡大について用語
・強いスケーリング：規模を固定したまま達成できる速度向上
・弱いスケーリング：規模を拡大した場合に達成できる速度向上
強いスケーリングより弱いスケーリングの方が楽そうに見えるが
記憶階層によって妨げられることもあるので一概には言えない。

■SISD,MIMD,SIMD,SPMD,ベクトル
ユニプロセッサは単一命令、単一データ流の区分に該当
マルチプロセッサは複数命令、複数データ流の区分に該当
それらが組み合わさって4種類存在する
単一命令：単一データ＝SISD
単一命令：複数データ＝SIMD
→データのベクトル操作
 特徴として命令ひとつに対し全てのプロセッサが応答すること。なので同一の構造を有する大量のデータ処理が得意
複数命令：単一データ＝MISD
→パイプライン方式で一連の計算を実行するもの。データを復号し圧縮されているデータを解凍したりするもの
複数命令：複数データ＝MIMD
プログラマは通常MIMD型コンピュータ全てのプロセッサ上で実行されるプログラムを作成する。
ベクトル命令の反対はスカラアーキテクチャ
スカラアーキテクチャと比較してベクトル命令にある特性は以下
・大量の作業を指定してループ全体を実行することで効率化できる
・ベクトル内の各結果が同じベクトル内のほかの結果の計算と確実に独立している
・アプリケーションにデータレベル並列性があれば効率の高いアプリケーションが容易に作成できる
・データハザードチェックの回数が少なくなる
・メモリバンクからのベクトルのフェッチが簡単
・ループ始点に戻る分岐によって発生する制御ハザードが存在しない
・消費電力が良い

■ハードウエアマルチスレッディング
ハードウエアマルチスレッディング：MIMDに関連する概念
MIMD＝複数のプロセスまたはスレッドを利用して複数のプロセッサを全面的に作動させるもの
マルチスレッディングのアプローチは以下
・細粒度マルチスレッディング
  命令ごとにスレッドを切り替えて複数のスレッドを交互に実行するもの
・粗粒度マルチスレッディング
  長時間ストールが発生した場合にスレッドを切り替える

■マルチコアをはじめとする共有記憶型マルチプロセッサ
共有記憶型マルチプロセッサ＝すべてのプロセッサにまたがる単一物理アドレス空間

共有するのは2通り
・均等メモリアクセス＝メモリ中の語にアクセスする時間はどのプロセッサがどの語を要求したか関係ない
・非均等メモリアクセス＝どの語を要求したかによってメモリアクセスの早さが異なるもの
プロセッサ同士の調整＝同期

■グラフィックス処理ユニットの概要
グラフィック処理用に作られたCPU＝GPU
GPUはCPUの補完的存在。

■クラスタ、ウエアハウス、スケールコンピュータおよびその他のメッセージ交換型マルチプロセッサ
アドレス空間の共有に代わる方法は各プロセッサが独自に私有の物理アドレス空間を持つこと。
またそれぞれのマルチプロセッサ同士が明示的なめっサージ交換を通じて情報を交換する必要がある。

ウエアハウスコンピュータ＝対象にサーバを用意しそれぞれ繋ぐことによって巨大なコンピュータ化させたもの（HPC？）

■マルチプロセッサネットワークトポロジの概要
マルチコアチップはコアを繋ぎ合わせるためのオンチップネットワークを必要とし、
クラスタはサーバを繋ぎ合わせるためのローカルエリアネットワークを必要とする。
それぞれのトポロジの性能を評価する尺度は以下2つ。
・ネットワークバンド幅＝統合的
・2分割バンド幅＝最善地とのつりあい

リング⇔全結合ネットワーク

■誤信と落とし穴
誤信：Amdahlの法則は並列コンピュータには適用できない→適用できる
誤信：ピーク性能は現実の性能を反映する→発表されているピーク値は違う可能性がある
落とし穴：マルチプロセッサアーキテクチャを十分に活用した、あるいはそれに最適化したソフトウエアを開発しないこと
誤信：メモリのバンド幅を増やさなくとも優れたベクトル性能が得られる。→バンド幅はどのアーキテクチャでも非常に重要