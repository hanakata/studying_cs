アセンブラ、リンカ、SPIMシミュレータ

SPIM＝MIPSプログラムを実行するためのシミュレータ
アセンブリ言語で組む場合は事象に対し迅速かつ設計どおりに応答する必要がある場合。
ただ現在、プログラマがコンパイラに勝てる部分は少ないので現状では
コンパイラが用意されていないような古いコンピュータ等の場合のみ。

アセンブリ言語の欠点はマシン固有のものになること。
また実装すると長くなること。

■アセンブラ
アセンブラはアセンブリ言語で記述されたファイルを2進数の機械語命令とデータファイルに翻訳する。
オブジェクトファイルをそのまま実行することは出来ない。
オブジェクトファイル外から呼び出せるものを外部ラベル、グローバルラベルと呼び
オブジェクトファイル内からしか呼び出せないものをローカルラベルと呼ぶ。
アセンブラは各ファイルを個別に処理するためローカルラベルしか処理できない。
なのでグローバルラベルにアクセスするにはリンカが必要。

オブジェクトファイルの形式は下記6セクションに分けられる（UNIXの場合）
・オブジェクトファイルヘッダー
・テキストセグメント
・データセグメント
・リロケーション情報
・シンボルテーブル
・デバッグ情報

マクロ＝パターン照合してそれを命令列に置き換える機能

■リンカ
1本のプログラムはいくつか分割してソースファイルに格納し個別コンパイルなど出来る。
なので別々にアセンブルした場合、リンクステップが必要になる。
リンク作業を行うツールをリンカと呼ぶ。
リンカの機能は以下
・プログラムが使用しているライブラリルーチンをプログラムライブラリから探す
・各モジュールのコードの主記憶上のロケーションを決定し絶対アドレスを参照している命令の参照先アドレスを調整する。
・ファイル間にまたがる参照のアドレスを決定する

リンカの最初の仕事は未定義ラベルがないようにすること。

■主記憶領域の使用法
MIPSプロセッサベースのシステムは主記憶を3つに分割する
・テキストセグメント（プログラムの命令が格納される場所）
・データセグメント（静的データ、動的データ）
・スタックセグメント

■手続き呼び出し規約
手続きをコンパイルするとき、どのレジスタが手続きのために使用できてどのレジスタを開けておくか
決めておく必要がある。＝レジスタ使用規約、手続き呼び出し規約

■例外と割り込み
MIPSプロセッサにおいてコプロセッサ0と呼ばれるCPUの一部に例外および割り込みを処理するために必要な情報が記憶される。
例外が発生すると例外ハンドラにジャンプする。

■入力と出力
端末装置は以下2つの独立したユニットで構成される
・レシーバ＝入力された文字を読み取る
・トランスミッタ＝コンソールに文字を出力する
レシーバからトランスミッタへ読み出されたかどうか判別するにはビットにそれぞれ
呼び出していない場合は1、読み出された場合は0を保存する。
