第10章 プラクティス6

テストと呼ばれるもの
・受け入れテスト＝顧客テスト
→ストーリーのふるまいを明確にする
受け入れテストはエッジケースの箇所や特定のシナリオに対する例外を理解するのに役立つ
また受け入れ基準を明確に定義することで受け入れテストがどうなったら終わるかが確実になる。
受け入れテストには自動化するツールで使われるGherkinと呼ばれる言語がある。

・ユニットテスト＝開発者によるテスト
ストーリーよりも小さいユニットをテストするためのもの
コードの開発を進めるためにユニットテストを作る
ユニットテストは内部ドキュメントとしても機能させることによって多くの時間が節約できる。

・それ以外のテスト＝QAテスト
上記以外はQAプロセスの一部。
結合テストは実際の依存関係を使用してコンポーネント間の相互作用をテストする。
そのためテストが壊れやすく遅いものとなる。
したがって依存関係は切り離してユニットレベルでできる限りのテストを行うほうがよい。
→スピードアップにつながる
そしてテストは自動化するべき。
ただ人の介入も必要なのでそういったテストはそういうテストで行うべき。

QA
QAテストの形態
・コンポーネントテスト
→ユニットがどのように連携するか
・機能テスト
→エンドツーエンドのふるまいを完全なものにする
・シナリオテスト
→ユーザがシステムと対話
・パフォーマンステスト
→ユーザ単体ではなく大量になったときどうなるか
・セキュリティテスト
→脆弱性調査

テスト駆動開発はQAの代わりではない
テストファースト開発をしていれば自動回帰テストを用意する手助けにはなる。
ただしあとからテストを追加することにはなる可能性が高い。
ふるまいを検証するのではなくふるまいを表す方法としてテストファースト開発を行うと
どんなテストが必要かより明確に理解できる。

ユニットテストは万能ではない
ユニットテストは素晴らしいスタート地点ではある。
ただしテストファーストにしておかなければ意味がない。
テストファーストにしておけば単なる自動化されたユニットテスト以上のものを得られるし
これによって良い設計がなされたシステムを作る手助けになる。

良いテストを書く
良いテストを書くためにはスキルを習得しなければならない
→ほとんどの開発者が良いテストを書けていない
テストファースト＝小さな機能テストを書いてからその機能を実装する
→Go言語でやるやつ
コードを書いてからテストを書くのでも得られることはある。→自動化された回帰テストを好きな時に実行できる
ただテストを実行するためにコードをクリーンアップする必要が出てくることがほとんど
→最初にテストを書いておいた方がよい。

テスト駆動開発はQAの代わりではない
コードを書く前にユニットテストを書く
→これは一体何か？→仮説ととらえるのはどうか。
そうとらえるとテストは
・仮説であり、ふるまいの仕様
・回帰テストが常に用意されていて実行され、コードが期待したように機能することを検証すること
ある意味ではテストはセンサー。

ふるまいの集合体
ユニットはコードではなくふるまいの単位である。
コードは常に観察可能なふるまいをするべき。
なのでふるまいが変わらないのであればユニットテストは書く必要がない。

テスト駆動開発はすばやいフィードバックをもたらす
ソフトウェアを開発する一番安価な方法は最初からバグが出ないようにすること
次に安価なのは同じ人が発見したらすぐに修正すること
テスト駆動開発は素早いフィードバックをもたらしてくれる。