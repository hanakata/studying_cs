第11章 プラクティス7

レッド/グリーン/リファクタ
テーストファースト開発には3つの異なるフェーズがある
・レッド
・グリーン
・リファクタ
すべてのテストが成功するとグリーン。失敗するとレッドが表示される。
最初にテストを書く段階ではテスト対象のコードがそもそも存在しない。
コンパイルすらできないはず。
次にやるのがスタブアウト。テストをコンパイルできるように必要なメソッド等作成する。
中身は書く必要がなく単に0を返すだけ。
メソッドのスタブを作ればコンパイルしてテストはできる。ただし失敗する。
失敗の失敗は非常にやばいので必ず失敗を確認できることを確認すること。
実装はテストをパスするのに一番必要な一番簡単なコードを書くところから始める。
そしてテストを成功させる。成功させたら品質の向上を行う。
テストと実装は対話のようなもの。
できるか？→できない→教える（実装）→次これは？。。。

テストファーストの例
例示なので省略

テストは仕様だ
ユニットテスト＝仕様
テストは常にさまざまな理由で失敗するが各テストは1つの理由で失敗する
→生きた仕様

完全であれ
一連のテストがストーリー全体を伝えていて完全な仕様になっている場合、
ふるまいのテストをかいていなければそのふるまい自体が偽となる。
テストスイートに含まれていないものはすべて存在しないものとなる。
テストファーストの開発でも完全なテストセットを持つことが重要。
→ふるまいを作るならテストも作る
テスト駆動開発とQAを同時にやったら良いのでは？
→確実に失敗する
QAは開発段階で考えていないようなケースについても確実にカバーできるようにすること
テスト駆動開発はあくまで振る舞いのみのテストであり、非機能要件等のチェックは
QAがやるもの。

テストを一意にする
良いテストの基準はテストが未知の理由ではなく既知の理由で失敗することと既知の理由で失敗するテストはシステム内に1つだけであること。
→つまりテストは一意であることが重要
テストが失敗したときに1つだけなら明確。
→テストを複数書くのはやりたくなるけれど必ず失敗する

コードをテストでカバーする
コードカバレッジツールで100%になるようにテストを作成する。
自明のものはテストをしない、複雑なものはテストをしないなどの言い訳を許さない
テストはコードの仕様化

バグにはテストがない
すべてのバグはテストがないゆえに発生する。
テスト駆動開発ではまずバグが発生したらバグが発生するようなテストコードを書く。
それがグリーンになるように修正する。

モックを使ったワークフローテスト
ユニットはパラメータや結果、アルゴリズムなどの検討に役立つがにたようなほかのシナリオで正しく動くかはテストできない
このような場合、ワークフローテストを実施する。
ワークフローテストはモックを使用する。
モックは実際のオブジェクトの代用
モックはテストのみで利用すること

セーフティーネットを作る
テスト駆動開発はソフトウェアを作るためのリズムや開発者が安全にコードを書くためのセーフティーネットを提供する。
テストファースト開発を行う最大の利点はソフトウェア開発者がテストしやすいコードを書くようになり維持するコストも抑えられる
なので最初にテストを作るほうが理にかなっている。

テストを仕様としてつかうための7つの戦略
・テストを文書のように扱えるようにする
・糸がはっきりわかる名前のついたヘルパーメソッドを使う
・何が重要なのかを明らかにする
・実装ではなくふるまいをテストする
・モックを使ってワークフローテストする
・書きすぎない
・正確な例を使う

