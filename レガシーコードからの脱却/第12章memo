第12章 プラクティス8

テストを最初に書いて設計を最後にしよう。

変更しやすさへの障害
保守可能なコードは読みやすく理解しやすいため変更が可能で柔軟。
良いコード＝変更が楽であること
変更しやすくするためのガイドラインは存在する。
逆に変更を難しくするプラクティスは以下
・カプセル化の欠如
→あるコードがほかのコードを知っていると直接的もしくは間接的な依存性が増える。
　結果として無関係と思えるものに影響を与えることがある
・継承の過度な利用
→継承を過度に利用すると無関係な問題を紐づけたりして保守上の問題を起こす
・具体的すぎる凝り固まった実装
→重要部分の抽象化を欠くことによって2つかそれ以上のふるまいの間の共通性も失われる。
　その結果、冗長なコードや不必要に複雑なオードとなり扱いが難しくなる。
・インラインコード
→メソッドとして切り出さずコードをインラインでコピーアンドペーストしたほうが組み込みの場合効率的と言われてきた。
　最近はコンパイラが間接的なメソッド呼び出しを最適化できる。
・依存性
→適切に分離しないと一緒に扱う必要のない問題同士を結合させてしまう。
・作ったオブジェクトを使うか、使うオブジェクトを作るか

問題はちょっと雑な状態でも問題ないこと

持続可能な開発
持続可能なコードを書く方法は以下
・死んだコードを消す
コメントアウトされたコードや呼び出されないコードは死んだコード。
死んだコードは消す。必要になったらバージョン管理システムから戻せばよい
・名前を更新する
メソッドやクラスの名前を意図のわかる良い名前に更新する。
コードを変えたらそのコードに合わせた名前に変更する
・判断を集約する
判断を集約して1回だけで済むようにする。判断が変わるならそこだけ変えればよい。
・抽象化
外部依存性には抽象を作成し利用する。
・クラスを整頓する
利用範囲においてモデルが完全であることを確認すること

コーディング対クリーニング
ソフトウェアを作る＝多くの異なるメンタルモデルを必要とする
→開発者は多くのことを頭の中で追跡する必要がある
異なるメンタルモデルを分割しそれぞれ別々に追跡できればメンタルモデルは明確になる
→それ以上のメリットはない
同時に複数のメンタルモデルと抽象を扱う中で見出した設計
→弾力的で問題の本質を反映できる→理解しやすく保守しやすい
コーディング中
→テストに合格するようにふるまいを調整することに集中する
クリーニング中
→テストでサポートされた動くコードを理解しやすく扱いやすくすることに集中する
改善のためにちょっとずつコードを触り続けることで改善のスパイラルに入っていくことができる
技術的負債はリファクタリングステップで返済する。

ソフトウェアは書かれる回数より読まれる回数のほうが多い
コードは読むためのもの
ソフトウェアは1回書いたら終わりのものではなく何度も書き直すもの
そのためにコードは十何で変更可能で作業しやすくなければいけない
コードの意味を伝えるのはコメントではなく名前で。

意図によるプログラミング
メソッドやサービスを外の世界に公開しようとするときメソッドの中に実装を入れない。
→コードが読みやすくなるから。
公開APIの実装はどんなに小さな機能も委譲すればよい。
オブジェクト指向の階層で大事なのは目的。
コードは思考のようなもの。

循環複雑度を減らす
複雑循環度＝コードの中の実行経路の数を示す
条件分岐が1つあるコードの循環複雑度は2。
循環複雑度を1に保つことは絶対にできない
ただ条件分岐は少ないに越したことはない。
減らすにはコードでポリモーフィズムを使うとよい。
生成と利用のフェーズを分割することでコードを疎結合に保てる。

生成と利用を分離する
オブジェクト指向言語ではオブジェクトを生成してからオブジェクトを利用する。
オブジェクトを生成するオブジェクト＝ファクトリー
ファクトリー＝newキーワードをカプセル化する
コードに対して何をやってほしいかを伝えるのは必須。
これをやるためにポリモーフィズムがある
ポリモーフィズム
→タスクを実施してほしいがどうやってやるかの中身は知りたくない場合。
例えば圧縮ファイルを伸長したい場合、伸長するコードとどう圧縮されたかを把握するオブジェクトを分ける。
→ポリモーフィズムの動き
正しくポリモーフィズムを使うにはオブジェクトを生成を分離する必要がある。

創発する設計
反復開発は設計を創発する。
単一のテスト可能なふるまいから始めて拡張を続けて設計が創発される。
テストファースト→設計原則とプラクティス→技術的負債の返済
→良い設計
ソフトウェア開発中の課題に注意を払い続ける＝資産に変える方法に気づく
開発の課題はより開発をうまくやるための手掛かりになる。
新しい要求がきたらどう扱うかを考えて開発する。
→ジャストインタイム設計

創発設計をマスターする7つの戦略
・オブジェクト指向設計を理解する
・デザインパターンを理解する
・テスト駆動開発を理解する
・リファクタリングを理解する
・コードの品質にフォーカスする
・情けはかけない
・良い開発プラクティスを習慣にする

コードをクリーンにする7つの戦略
・コードに語らせる
・テストを足すために接合部を作る
・メソッドの凝集性を高める
・クラスの凝集性を高める
・判断を集約する
・ポリモーフィズムを導入する
・生成をカプセル化する

まとめ
品質は保証できない。品質は作り出すこと
読みやすく理解しやすいコードが柔軟で変更しやすい
意図を示すプログラミングは観点の凝集につながる。
オブジェクトの製紙絵と利用を分離することでテスト容易性を改善し依存性を下げる
創発設計は初心者向きではない
