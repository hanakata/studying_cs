第13章 プラクティス9

リファクタリング＝外部へのふるまいを変更せずにコードを再構築または再パッケージ化すること
リファクタリングは以下4つのコストを削減する
・あとからコードを理解する
・ユニットテストの追加
・新しい機能の追加
・さらにリファクタリングする

投資か負債か
先送りしてよいものもあればまずいものもある。
技術的負債はほとんどの場合累積していく。なのでできるだけ早く返済する。

怠け者になる
技術的負債は利子が消耗させる。
技術的負債を早く返済する＝怠け者

コードの変更が必要なとき
最悪にできの悪いレガシーコードでさえも変更する必要がない限りそのままにしておけば動きはする。
ただしそのままだと保守は不可能なので安全かつ段階的に変更していくこと。
変更するまえに必ずテストを追加してから行うこと。
レガシーコードは時限爆弾ではなく地雷。
・既存コードへのテストの追加
既存コードを変更しテストしやすいようにする。
・良い習慣を身につけるために悪いコードをリファクタリングする
リファクタリングを続けると悪いコードを書くのをやめて悪い習慣に従うのをやめプレファクタリングを始める。
・不可避なことを先送りする
ソフトウェアの保守性を優先することでソフトウェアの所有コストを削減できる

リファクタリングのテクニック
・ピンニングテスト
全体的なふるまいに対してピンニングテストを書くところから始めて最低限必要なサポートを得られるようにする。
それからコードに変更を加える。
ピンニングテストは非常に粒度があらいので頻繁に行う必要がある。
品質を向上させるような小さなコードの変更を少しずつ加えること
・依存性の注入
使用するオブジェクトを自分で生成するのではなくフレームワークに作成させてコードに注入する
依存関係を注入することでオブジェクトはサービスから切り離される。
こうすることでテスト可能になり拡張しやすくなる。
・ストラングラーパターン
システムを停止せずにコンポーネントを変更する場合に使う
古いサービスをラッピングする形で新しいサービスを作り最終的に古いサービスがなくなるまで置き換えていく。
まず古いサービスを置き換えることを目的とした新しいサービス用のインターフェイスを作り
そのインターフェイスを呼び出すようにする。
そうして作り替えていく。
・抽象化によるブランチ
抽象化によるブランチ＝バージョン管理からブランチをなくすのに役立つ

変化に対応するためのリファクタリング
基本的な考え方
→クリーンアップし保守可能で理解しやすいように変え安全に変更できるようにテストを組み込む。

・オープン・クローズドにリファクタリングする
拡張に対して開かれているが変更に対して閉じられているべき。
このやり方で機能を追加するうえで安全かつコストパフォーマンスの高いやり方。

リファクタリングで変更しやすさを確保する
コードの変更しやすさは偶然生まれることはない。
良い開発の原則とプラクティスに従って意図的に新しいコードを書くか
レガシーコードを慎重にリファクタリングする必要がある。

2回目は適切にやる
最初から正しくやることはかなりプレッシャー。
なのでいつでももとに戻れること、編集できること、クリーンアップできることを覚えておくこと。
そうすれば気楽に設計が可能になる。

リファクタリングから価値を得るための7つの戦略
・既存のシステムを学ぶ
・小さく改良する
・レガシーコードをテストで改良する
・クリーンアップをしながら進める
・詳細がわかったら実装を再設計する
・進む前にクリーンアップする
・やってはいけないことを学ぶリファクタリング

いつリファクタリングを行うかについて7つの戦略
・重要なコードがうまく保守されていないとき
・コードを理解している人がいなくなったとき
・新しい情報によってより良い設計が見つかった時
・バグを修正するとき
・新機能を追加するとき
・レガシーコードのドキュメントを書くとき
・作り直すより安い場合

まとめ
技術的負債を返済するためにコードをクリーンアップする効果的な方法
機能追加の前準備と実際の機能の追加を切り離すことで作業が大幅に単純化されバグ発生リスクが減ること
コードを効果的にクリーンアップする方法とソフトウェアを作るときに設計を改善することが重要な理由
リファクタリングがうまくなればクリーンなコードを自然に書き始めるようになること