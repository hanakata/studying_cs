1章 何かが間違っている
レガシーコードとは？
→構造が全く分からない、単純な機能追加すら相当な時間を必要とするもの
　→全体的なやる気の低下を促すようなコード

レガシーコードが生まれる原因は？
修正していく上で設計が弱体化しドキュメントもなく、変数名も適当になっていくから

ウォーターフォールモデル
以下の7つのステップで進めていくもの
要求→設計→実装→統合→テスト→インストール→保守
このモデルは建設業では理にかなっている
→機能要件をリリース単位でまとめた方が効率的だから
ソフトウェア開発はある部品を組み立てる作業ではない
＝ウォーターフォールモデルには向かない
→全部できないと何も動作しないから
　→どこかでミスってても最後まで分からない。
最後で修正すると全てを見なければならないので時間がかかる＝高価

ウォーターフォールがうまくいかない理由
→作成者は相当後になって動作確認ができる。
　→物理的なものであればまとめてやった方が早い
　→仮想的なものではうまくいかない。
　　→まとめてやると後から追加ができない＝家を作成後に部屋を追加できるか？

レシピと公式の違い
レシピ＝詳細に従ってやれば同じものができるし少々変更しても似たようなものができる
公式＝ちょっと違うだけで全く別のものができる。
ソフトウェア開発は創造的に解釈できるレシピでなければならない。

開発とテストの分業はすべきではなく、作成、変更したらすぐに確認するようにすべき。
エラーを探すのが自分の仕事ではなく作るのが仕事だ＝NG

プロセスが忙しい仕事になる
コメントを書く事を義務にしてはいけない。過度のコメントは害悪でしかない。
コメントにはwhatではなくwhyを書くべき。

ガチガチのマネジメント
ソフトウェア開発は正しく終わった、早くできるかをたったひとつの基準で判断できる繰り返しのタスクではない。
我々のやっていること
・考える事
・可視化すること
・モデル化すること
・コードで表現すること
＋問題解決するには新しい事を学ぶ必要がある。
マネージャとしてはエンジニアが正しいことをしていることを保証したい。
正しい事とは？ゴールは何か？
→ソフトウェア開発者でこたえられる人はほぼいない。
マネージャは答えようとしてプロセスを色々追加する→人のやる気が減る
→プロセスは創造性に影響しない

ここにドラゴンがいる
ソフトウェア開発がすることの大部分は未知の部分。
数字で表せばどんな人も安心することは当然のこと。
ソフトウェア開発者も未知の部分に安心して向かっていくために計測する
→これも推測でしかない
大きくなればなるほど進捗を正しく測れない。
開発者の状態は3つ
・終わった
・始めてない
・ほとんど終わった

未知を見積もる
ソフトウェア開発でのタスクは刻一刻と変化し日ごと月ごとプロジェクトごとで変化する。
なぜ誰もみない設計書が生まれるのか？
→それが良い解決方法につながると信じてるから
　→大体が無駄な時間で終わる

素人業界
ソフトウェア業界は素人業界
すべては仮想領域のものなので抽象的に考える必要があるが、それに慣れていない
しかもソフトウェア開発のコンテキストも理解していない。

→ソフトウェアは大体が作り方や保守の仕方を間違えている。
