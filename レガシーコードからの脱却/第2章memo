2章 CHAOSレポート再考
レガシーコード＝ビジネスそのものを脅かす危機
→失敗をさけるならデータを確認し要因をさがす必要がある。
CHAOSレポートとは？
ソフトウェア開発の成功率を様々な指標から評価すること
各定義は以下
・成功
当初予定した昨日を納期通りに完成させ予算内に収めること
・問題あり
予算超過、納期に間に合わない、機能削減
・失敗
キャンセルされたプロジェクト
年々改善はされているが現在でも1/3しか成功していない
→調査そのものは問題ないのか？

スタンディッシュレポートの誤り
成功という定義が微妙。市場に適合したかのデータは全くない。
→成功の定義が失敗のレシピとしか思えない。
　→ソフトウェアについての情報を正確に予測できるという前提のもとになっている。
　　→ついでにプロジェクトを始める前に分かっている前提
とある論文の中でそもそもの定義に誤解を招く一方的なもので見積り手法を歪めてしまい意味のない数字となることを示した。
当初の目標を達成するのは＝失敗の定義に近い
→顧客が本当に欲しがっているものを学んでおらず最初に示された仕様より良いものになっていないため。
なのでスタンディッシュレポートは以下のものも成功と呼ばれる
・1ヵ月後にクラッシュした
・追加依頼に対応できないぐらいバグだらけ
・技術的負債を生みまくり
・顧客から二度と発注が来なくなった
→成功とされているものは成功と言えないものも大いに含まれる

プロジェクトがなぜ失敗するのか
そもそもソフトウェア業界は失敗が多い
→ソフトウェア開発部門はあてにならないとなる要因となっている。
成功率を下げる要因は以下
・コードの変更
・バグの修正
・複雑さの扱い

コードの変更
ソフトウェアが勝手に変化することはない。
変更の必要がないソフトウェアは使われていないソフトウェアだけ。
機能追加はよくある要望の1つ。
機能追加する際は初めに作った人でないことがほとんど。
なので全体を見ることなく機能拡張を実施してしまう。
→どんどん複雑になっていく。
　→開発者は変更できないコードを書きすぎている。

蔓延
開発プロジェクトが失敗する理由の多くはバグ。
バグ修正に多くの時間を費やす人は少ない。
→バグを見つけるのがそもそも難しい。
本当はバグを見つけやすくするにはどうするか？が大事。

複雑性の危機
80%の開発コストが「障害の特定と修正」にかかっている（NIST談）
ほとんどのソフトウェアは読みやすさよりも書きやすさが優先。
システム全体が依存性にまみれている。
一度たりとも使われない機能は45%にもなる。これはマーケティングしやすくするため。
そういったものが原因でどんどん複雑なシステムになっていく。

失敗のコスト
私たちの業界が効果的で効率的になるにはまだ遠い道のりが残っている。

本章のまとめ
ソフトウェア開発の非効率なやり方はビジネスに巨大な損失を毎年もたらしている。
私たちはこの危機に取り組まなければならない

ソフトウェア業界で引用されるCHAOSレポートには本質的な問題があるが
業界が課題を解決する道のりは遠いという結論は正しい

ソフトウェア業界についての主要な研究は破綻したソフトウェア開発プロセスのために
アメリカ合衆国だけで毎年100億ドル単位の損失をだしていると結論づけている

誰もがレガシーコードというグローバルな問題を生み出すのに一役買っている。
なので問題を解決する責任がある。
