第3章 賢人による新しいアイデア

2000年終わりごろの気づき→ソフトウェア開発に余計なものはない方が良い。
製造業での無駄なもの→在庫とか
ではソフトウェアでは？
→手につけたものの完了していない仕事。極言すればソフトウェアになっていないもの。
　→アジャイルソフトウェア開発によって広まった考え方
　→開発者が集中してエンジニアプラクティスを適用できるようにする。

小さいほどよい
プロジェクトがどのくらいかかるか→常に確信は持てない
そもそもゴールも長さも定かではない。
ではどうするか？
→小さく区切るのはどうか？そうすれば期間も修正も簡単では？

アジャイルを実践する
ウォーターフォールとアジャイルが混ざったような進め方をする場合があるが
あまり意味はない。
なのでウォーターフォールとかアジャイルとかレッテルを貼るのではなく
具体的な影響に対処できるプラクティスに目を向けることが重要。
例えば「小さな単位でビルドする」というプラクティスの主目的はタスクを可能な限り
はやく始めて終えること。

芸術と技能のバランスを保つ
ソフトウェア開発は複雑で多様な領域。
色々な問題に対処するため知的な道具を数多く持っておく必要がある。
ただしあらゆる問題に対応するスキルは習得できない。

技術的卓越性を求める
今作られているソフトウェアの大多数が扱うのも困難。
→関わっている開発者も技術的負債が何か分かっていない状況。

まとめ
直面している課題は多いものの賢人たちが持ち込んだ新しい考え方によって
ソフトウェアは正しい方向に動き出している

アジャイル開発手法はウォーターフォールに代わる選択肢でソフトウェアを反復的につくるもの

ソフトウェア開発者はソフトウェアを作るという客観的な技能と
ソフトウェア開発独自の要求が求める主観的な芸術のバランスを学ぶ必要がある。

アジャイルは過激で新しいイノベーションから主流へとキャズム越えつつある段階

ソフトウェア開発者とマネージャは技術的卓越性を求め、意図的に質の良いソフトウェアを
開発する必要がある。