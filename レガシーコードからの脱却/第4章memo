第4章 9つのプラクティス
ソフトウェア開発＝複雑
→最近やっとものごとを理解し始めたところ
ソフトウェア開発プラクティスに従うこと＝どのようなソフトウェアを開発していても正しく行われる必要があること
ただソフトウェア開発に唯一の正しいやり方があるわけではない

専門家が知っている事
専門家は自身の知識を独自の方法で整理している。
また重要な差別化要素を説明するための語彙を持っている。
＝理解のためのコンテキストが普通の人と異なる。
ただし専門家が使う技術は学習できる＝学習して同じことをすれば似たような結果は得られるはず
最も重要なこと
「ソフトウェア開発の専門家はほかの人よりも高い品質基準を維持していること」
最速のプログラマは最も綺麗好き。
コードの品質を高く保っていたにも関わらず速い・・・×
コードの品質を高く保っていたからこそ速い・・・〇
品質管理ができていないコードは保守性が低い→修正に時間がかかる→コストが高い

守破離
アジャイルをやっていいこと、悪い事のルールで覚える人は多い。
けれどルールを覚えるのは学習ステージの最初。
守から始める理由・・・プラクティスの背後にある理論が簡単には理解しにくいから。
理論を実践すること＝破
プラクティスを使えるようになり、背後の理論を深く理解したらプラクティスと理論の境界が曖昧になる＝離
熟練するには10000時間必要。

第一原理
第一原理＝多くの法律、社会、文化がシンプルな言明に基づきそのほかの原則が導き出せるもの
ソフトウェア開発に黄金律やヒポクラテスの誓いに相当するものはあるか？A.ない
ソフトウェア開発の第一原理の例としてクラスを変更する理由は1つでなければならない。
原則は強力だが何をやるべきかだけで、どうやるかはない。

原則となるために
原則は簡潔で明確に定義されていなければならない。
原則は私たちがその良さをしり目指す姿である。

プラクティスとなるために
実際の状況において原則を実現する方法としてプラクティスが存在する。
プラクティスであるためには以下の条件を満たす必要がある。
・ほとんどの場合に価値があるものである
・学ぶのが容易である。教えるのが容易である。
・実施がシンプルである。考えなくてもやれるくらいシンプルである。

原則がプラクティスをガイドする
プラクティスの背後の原則が分かればプラクティスを実行するのに思い悩む必要はない。
プラクティスが質問を不要にし対応の不確実性を消す。
プラクティスは原則を理解するのに役立つし、原則はプラクティスを正しく使うよう助けれくれる。

予測か対応か
変更しやすいコードでなければ変更が必要となったときにコストが大きくなる。
ではどの程度予測しておけば対応しやすいか？
→ストレスのたまる問題＝ストレスは良いプロダクトを作成する助けにはならない
現在のソフトウェア開発
→すべての役者がいつも最初のテイクで完璧に演じなければならない。
　→すごいストレス
一部だけ動かすことで他の部分を楽にできる。
→最初に失敗してもいくらでも取り返せる
いくら予測しても大体当たらない＝開発者の貴重な時間を失う無駄
プラクティスに従うことでコードの変更が楽になるなら無駄がない。

「良い」ソフトウェアを定義する
良いコードとは？
一貫性のある答えを得られることはない
良いコードという線引きは非常に難しい。
ただ価値があるというソフトウェアは必ず変更されることになる。それに対応するための準備は必要。
ソフトウェアを変更可能に出来れば初期費用の投資対効果を改善できる。
対象は全てのコード。
ソフトウェア品質を外部指標で特徴づける人は多い
外部指標とは？
正しいことをする、バグがない、速い、など。→深い原因の症状にすぎない
今回は内部品質。内部品質は結果ではなく原因であり良いソフトウェアが備えているべきもの。

9つのプラクティス
１．やり方より先に目的、理由、誰のためかを伝える
２．小さなバッチで作る
３．継続的に統合する
４．協力しあう
５．「CLEAN」コードを作る
６．まずテストを書く
７．テストでふるまいを明示する
８．設計は最後に行う
９．レガシーコードをリファクタリングする

まとめ
使われるソフトウェアは変更が必須。変更可能となるように書かれるべき
何かを正確にモデルにするにはまず理解
人並外れた開発者となるのに必要なスキルはすべて学習可能
必要な変更をすべて予測するよりも必要となったとき対応できるエンジニアプラクティスを身に着けた方が良い
ソフトウェア開発はほかの業界と異なる独特の課題がありそれらの課題に対応するためにはプラクティスの背後にある原則を理解する必要がある。
