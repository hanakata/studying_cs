第5章 プラクティス１

やり方は言わない
ソフトウェア開発は作ったことのない人にとって想像のつかないもの
→分かってもらうための労力は凄い事になる
一見すると要求が良いものに見えてくる。なのでやり方について伝えがちなので問題を増やす傾向。
開発チームはやり方にまで触れている要求を見聞きするとその通りに作らざるを得ない。
コンピュータは命令するものではなくコンピュータが働かされている世界を作るもの。

やり方を目的に転換する
ソフトウェア開発者として知りたいこと
・顧客が何を欲しいのか
・なぜ欲しいのか
・誰のものなのか
→やり方は開発者が考える事→教えられる必要はない。
ソフトウェアには法はなくとも専門家はいる。
良い開発者の関心ごとは保守性。
ソフトウェア開発者ごとで作り方は様々。その中で必要なことはどうやったかではなく選んだ理由であり
トレードオフの理解。
標準化したくなる欲求は置いといてふるまいの仕様を決めるためにどんなテストを行うかについて考えれば
自然と多くのものが共通化される。

プロダクトオーナーにいてもらう
素晴らしいソフトウェア開発プロジェクト＝プロダクトオーナーがいた
プロダクトオーナー＝プロダクトについて一番重い責任を持つ人
合議によって設計されたプロジェクトやプロダクト＝絶対にうまくいかない。
プロダクトオーナーは技術系ではないがプロダクトについて細部まで詳しい知識を持っている人ではないとダメ。
そして責任は全て自分が取るくらいのひとでないと出来ない。
不明点があればプロダクトオーナーに全て集まる。
プロダクトオーナーはバックログと次に作る機能に順序をつけることによって一番重要なものを確実に作り
そうでないものは今作らないという判断をしなければならない。

ストーリーで目的、理由、だれのためかを語る
ストーリーとは？
・何が
・何のために
・誰のために存在する
これを1文にまとめたもの。
ただしストーリーだけでは仕様書に足りない
→やり方ではなくコンテキストに注目できる
「ストーリー＝会話の約束」ともいえる
ストーリーは75mm×125mmのカードに書くのが一番良い。→余計なことを書くスペースがない。
これをもとに作ることで開発に集中できる。
→開発を進めていけば聞いてないことが自ずと分かるので都度確認すればよい。
アジャイル的な言い方で言えば「かろうじて十分なドキュメント」
仕様書等の作成を頑張るのではなく、コード自体に全ての知識をまとめるべき。
ストーリーは限定的なのでテスト可能になる。
テスト可能であれば終わりが分かる。
終わりが分かれば無駄な機能は作らない。

受け入れテストに明確な基準を設定する
段階的な要求から着手する前にプロダクトオーナーは以下の事を分かっている必要がある
・受け入れ基準はどういったものか
・開発者と議論するためにはどのくらいの詳細さが必要
受け入れ基準は
・何をするはずか
・いつ動くのか
・どうなったら次に進めるのか
が大事。
当然ながら全てがうまくいくパス＝ハッピーパスはひとつしかない。
なので例外を処理するための会話も必要
・ストーリーにまずい事が起きるとするとそれはなんですか？
ストーリーを完成させるためには本当にすべてのエッジケースを定義しなければならない。

受け入れ基準を自動化する
受け入れテストが決まればシステムのふるまいを定義して期待される出力の実例をそろえやすくなる。
自動化したテストをしようがしまいが受け入れ基準やコーナーケースをストーリーカードにメモしておいて
どんな例外を扱わなければならないのか思い出せばよい。

実践しよう
プロダクトオーナーのための7つの戦略
・SMEになる
テーマごとの専門家でなければならない。そしてプロダクトのあるべき姿を深く理解しておかなければならない。
・開発を発見のために利用する
開発の過程においてより良い解決方法を発見するために広い心を持ち続けなければならない。
・なぜ誰のためにを開発者が理解できるようにする
なぜその機能が必要とされたか、また誰のものなのかを理解する。
・どうやって手に入れるかでなはく何が欲しいのかを説明する
ストーリーを上手く作るコツは何を作るかに集中すること。
何を作るかに集中できれば保守性の高い解決方法を思いつく事もできる。
・質問にはすばやく答える
プロダクトオーナーは開発中に挙がってくる質問に答えられるようにしておく必要がある。
答えられなければ開発スピードは落ちる。
・依存性を取り除く
依存性か誰かをかかり切りにしないようにする。
・リファクタリングを後押しする
コードの品質に敏感になる必要がある。

より良いストーリーを書くための7つの戦略
・プレースホルダーとしてみる
ストーリーはそれだけで要求に代わるものではない。
今後の議論に持ち込みたいと思う話の本筋をつかむためにストーリーを活用する
・目的に注目する
機能が何をやるものなのか、どのように利用されるかについて理解すべき
・誰を擬人化する
誰のためにその機能があるのかを知ること。そのために使う人を視覚化することで理解が進む
・なぜ機能が必要とされたかを知る
その機能がなぜ必要で何を達成しようとしているかを知ることでより良い選択肢に至ることもある。
・シンプルに始めて追加はあとで行う
リファクタリングと創発設計を理解することで素早い開発もできる。
・エッジケースを考える
ストーリーはハッピーパスを提示するが代替パスや例外、エラーのハンドリング等々取扱う必要のあることがほとんど。
エッジケースはストーリーカードの裏に書き留めて記録しておくこと。
・受け入れ基準を利用する
受け入れ基準を明らかに定義しておくことが重要。

まとめ
・ソフトウェアがどう作られるかよりも何をすべきかに注目すること
・よりよく品質の高いソフトウェアを作るために周りの人たちとどう接するかを知る必要がある
・目的、理由、だれのためかを表現するために実装の詳細を説明することを捨て、昨日を定義するための
きわめて重要な会話に変えていくこと
・プロダクトオーナーは受け入れ基準が明確に定義された良いストーリーを描く
・効果的に機能を作って開発にあてる時間を全体の1/3にまで回復するべき。

実装を詳細に説明して要求をドキュメント化するのはやめよう。
会話で定義することで開発時間の1/3は取り戻せる。