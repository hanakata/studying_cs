第6章 プラクティス2

小さなうそをつく
自身にうそをつくことが実装によいことである場合がある。
何かをする際にうそをつく必要があるなら肯定的であり小さなものにすべき。

柔軟に進める
スコープについてもリリース日についても柔軟に対応できなくてはならない。
リリース日を早くしようとして人を追加すればコミュニケーションの量が増えて
速度が遅くなる。
仮に人も追加できず、リリース日も延ばせずとなった場合どうするか？
→作業の質を下げる
一番価値のある機能が最初に開発されるべき。そうすれば作ったものが顧客にとって
価値がありそうなら早期リリースできる。
小さなバッチで作り続けることは想定ではなく検証を続けることでそうすれば自身が
何を分かっていないかが分かってくる。
ものづくりには以下の数式が成り立つ
スコープ＝時間×リソース
ただしソフトウェアは絶対ではない。
ソフトウェアのスコープはとても柔軟である。

ケイデンスがプロセスを決める
例えば1リリースサイクルに6ヵ月費やした場合。
1ヵ月は要求に関することで最後の2ヵ月はテスト。
そのため実際にプログラムを書く時間は半月程度。
→非効率的
タスクが1週間で終わるサイズなら
→効率が上がる
何に時間が取られているか
→不要な要求や不十分な要求
要求をストーリーに置き換えてしまえば非効率的な仕事はなくなる。

小さい事はよいこと
大きなタスクをどうやって分割するか？
顧客にとって価値のあるものにもとづいて計測すべき
小さい方が良いのは以下の理由
・理解しやすい
・見積りしやすい
・実装しやすい
・テストしやすい

分割統治
分割統治とは？対立する都市国家同士が争っている状態を保ちつつ複数の争いが起こらないようにすること
→大きな問題は単なる小さな問題の集まり。
小さい課題は解決が容易。なので分割は重要。
ストーリーは複雑で複数の事が入り混じっていることが多い。
それを単純なことに分割していくことが重要。
複雑なストーリーを分割するには未知か既知かを分離する。
未知のものに対する対応方法は未知を既知にするか、カプセル化するか
Todoが多くなればサイクルタイムは長くなる。
仕掛中を減らしていけば小さな問題を小さいまま終わらせることができる。

フィードバックサイクルを短くする
フィードバックサイクルの観点では小さなバッチが望ましい。
ソフトウェア開発におけるほとんどののフィードバックサイクルにあてはまる。
会話とかデモもそれにあたる。
コンパイラから受け取るフィードバックもある。
フィードバックは行動可能な建設的フィードバックである必要はある。
優秀な開発者は20秒ごとにテストを行っている。
フィードバックは非常に重要なので多めにうけること。
ちなみに間違いは開発を続ける限りない。

