第6章 プラクティス2

小さなうそをつく
自身にうそをつくことが実装によいことである場合がある。
何かをする際にうそをつく必要があるなら肯定的であり小さなものにすべき。

柔軟に進める
スコープについてもリリース日についても柔軟に対応できなくてはならない。
リリース日を早くしようとして人を追加すればコミュニケーションの量が増えて
速度が遅くなる。
仮に人も追加できず、リリース日も延ばせずとなった場合どうするか？
→作業の質を下げる
一番価値のある機能が最初に開発されるべき。そうすれば作ったものが顧客にとって
価値がありそうなら早期リリースできる。
小さなバッチで作り続けることは想定ではなく検証を続けることでそうすれば自身が
何を分かっていないかが分かってくる。
ものづくりには以下の数式が成り立つ
スコープ＝時間×リソース
ただしソフトウェアは絶対ではない。
ソフトウェアのスコープはとても柔軟である。

ケイデンスがプロセスを決める
例えば1リリースサイクルに6ヵ月費やした場合。
1ヵ月は要求に関することで最後の2ヵ月はテスト。
そのため実際にプログラムを書く時間は半月程度。
→非効率的
タスクが1週間で終わるサイズなら
→効率が上がる
何に時間が取られているか
→不要な要求や不十分な要求
要求をストーリーに置き換えてしまえば非効率的な仕事はなくなる。

小さい事はよいこと
大きなタスクをどうやって分割するか？
顧客にとって価値のあるものにもとづいて計測すべき
小さい方が良いのは以下の理由
・理解しやすい
・見積りしやすい
・実装しやすい
・テストしやすい

分割統治
分割統治とは？対立する都市国家同士が争っている状態を保ちつつ複数の争いが起こらないようにすること
→大きな問題は単なる小さな問題の集まり。
小さい課題は解決が容易。なので分割は重要。
ストーリーは複雑で複数の事が入り混じっていることが多い。
それを単純なことに分割していくことが重要。
複雑なストーリーを分割するには未知か既知かを分離する。
未知のものに対する対応方法は未知を既知にするか、カプセル化するか
Todoが多くなればサイクルタイムは長くなる。
仕掛中を減らしていけば小さな問題を小さいまま終わらせることができる。

フィードバックサイクルを短くする
フィードバックサイクルの観点では小さなバッチが望ましい。
ソフトウェア開発におけるほとんどののフィードバックサイクルにあてはまる。
会話とかデモもそれにあたる。
コンパイラから受け取るフィードバックもある。
フィードバックは行動可能な建設的フィードバックである必要はある。
優秀な開発者は20秒ごとにテストを行っている。
フィードバックは非常に重要なので多めにうけること。
ちなみに間違いは開発を続ける限りない。

フィードバックに対応する
プロの開発者として仕事をするほどビジネスの視点で見るようになる。
ビジネスの着目点は2つ。
・価値
・リスク
ソフトウェア開発者は多くの言葉を利用するのでビジネス側には通じない場合がある。
フィードバックに対応できる仕組みがある会社のみ、フィードバックを頻繁にもらう意味がある。

バックログを作る
バックログは基本的に作りたいと思っているストーリーのリスト。
機能を様々な方法で整理する。整理する方法は目的に合っていればなんでもよい。
プロダクトオーナーは次に何を作るかを伝える責任があるので、
残りの機能の中で何が一番重要な機能かを把握する必要がある。
並び替えは柔軟に。

ストーリーをタスクに分解する
ストーリー＝システムにおける観察可能なふるまいを記述したもの
このままだと2週間のイテレーションでは扱えない
→タスクに分解する。
タスクは4時間程度で終わるもの、ただし状況に応じて期間は延びる
1日の作業時間が8時間なら実際開発に使えるのは4時間でタスクにかかる時間と同様。

タイムボックスの外側を考える
色々な新しい技法、アジャイルとかスクラムとか。
オブジェクト指向も含めて。
ただその本質はあまり広まってはいない。

スコープを管理する
もし潜在的なリスクが1%でもあるなら多くのリスクがある。
リスクをなくす方法はストーリーを完成させること＝明確な完成の定義をもつこと
システム開発≒シュレーディンガーの猫
タスクを習慣化するにはカンバンを使うことが良い。
次のタスクは？といった質問が出てくればいい傾向。
またチームが集まって今どこにいるのかを確認できるような報告の時間が必要。
目標は小さなタスクであることを忘れてはいけない。

ソフトウェア開発を計測する7つの戦略
・価値実現までの時間を計測する
価値を作り始めてからユーザが価値を実感できるまでの時間を計測する。
・コーディングに使った時間を計測する
良い開発プロセスとは開発者が自分の時間の多くを開発につかえるようにするもの。
そうなっているかを確認するために実際の時間を計測する。
・欠陥密度を計測する
コードの欠陥は深いところにある問題の兆候である場合が多い。
例えば開発プロセスの問題。根本原因を探して直すこと。
・欠陥検出までの時間を計測する
欠陥が発生してから時間が経過すると時間だけ修正コストが上がる。
混入したときに修正すること。
・機能ごとの顧客価値を計測する
すべての機能が同じ価値ではない。
全ての機能について価値を確認する。
・機能を提供しない場合のコストを計測する
機能を提供しないことで発生するコストによっては作る価値がない場合もある。
・フィードバックグループの効率を計測する
効率を向上させる一番効果がある場所はプロセスそのもの。

ストーリーを分割する7つの戦略
・複数のことが混じったストーリーを要素に分解する
ストーリーがサブストーリーで構成されている場合は複数のストーリーに分割する。
・複雑なストーリーを既知のことと未知のことで分離する
ストーリーが複雑なのは未知のことが含まれているから。
なので既知の事と未知の事は分割して考える。
・未知のことをわかるまで繰り返す
何が未知か判別できたらそれをカプセル化する。
・受け入れ基準をもとに分割する
ストーリーをタスクに分割する場合、タスクが終わったかどうか目に見える形で判断できる証拠がほしいので
受け入れ基準をもとにストーリーを分割する。
・依存関係を最小にする
ストーリーはほかのストーリーに依存しない方がよいが避けられないこともある
明確なインターフェイスを定義することでコンポーネント間の依存関係を取り除く
・意図を1つにする
ストーリーは単一の意図を満たすようなもの単一の意図の評価可能な1側面であるべき。
・ストーリーをテスト可能に保つ
ストーリーは受け入れ基準を満たしているか確認するための受け入れテストを持つべき。

まとめ
・納期がソフトウェア開発プロセスを決定すること
・自分の時間をもっとコントロールするにはどうしたらよいか
・小さなタスク程見積りもテストも簡単で扱いやすい
・機能を観察可能なふるまいに分割する方法
・タイムボックスで進められるようになったらスコープボックスを習得すること。
