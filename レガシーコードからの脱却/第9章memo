第9章　プラクティス5

CLEANなコードとは？
・Cohesive(凝集性)
・Loosely Coupled(疎結合)
・Encapsilated(カプセル化)
・Assertive(断定的)
・Nonredundant(非冗長)

高品質のコードは凝集性が高い
高品質のコード＝凝集性が高い
それぞれの部品は1つのものだけを扱う。
凝集とは？
単一の責任を持つべきであること
なぜ細かく分けるのか？
変更が発生したとき少ない数のクラスを見れば良いから。
クラスが正しく作れているかは名前が分かりやすくついているか。

高品質のコードは疎結合である
コード品質＝オブジェクト間の関係を明確な意図をもった状態に保つこと
→疎結合
疎結合なコードはそれを利用しているコードに対して間接的にしか依存しない。
なので分離、検証、再利用、拡張が便利。
ふつうは中間層から呼び出す形にする。
つまりコードにつなぎ目が必要。
密結合と疎結合のどっちがダメかは場合による。神APIだけは作らないように。

高品質のコードはカプセル化されている
実際の詳細は外部の世界からは見えなくなるものが高品質。
オブジェクト指向を使う最大の利点はエンティティをカプセル化できること。
カプセル化はふるまいなどを非公開にするだけでなくインターフェイスを
実装と切り離すこと。
カプセル化＝何かをやっているところからどうやってやっているかを切り離すこと
上手くカプセル化されたソフトウェアはインサイドアウトではなくアウトサイドインで設計することで得られる。
・アウトサイドインプログラミング
コンシューマの観点で機能を設計する
サービスはクライアントのニーズにもとづいて設計される。
サービスが何をやっているかを示す名前をつけ、どう動くかは隠す。
・インサイドアウトプログラミング
問題を小さな塊に分解しそれらを縫い合わせて1つのソリューションを作る。
ソリューションにたどり着けるよう分解する。そうしてしまうと全体を見渡していないため
責任が明確でない壊れやすいコードが作られる。

結局のところ両方の視点がないとダメ。ただ順序はある。
全体をみてからそれぞれのコンポーネントは何なのか、なぜあるのかから始める。
カプセル化は変更がシステムに及ぼす波及効果を減らすのに役に立つ。
カプセル化のポリシーは必要に応じて公開する。
カプセル化が習慣になれば呼び出し側の視点で設計するようになる。

高品質のコードは断定的である
ソフトウェアのエンティティは好奇心旺盛なものではなく断定的であるべき。
オブジェクトは独立していて自身の責任を持ち、自分で管理させる。

高品質のコードは冗長ではない
同じことを繰り返してはいけない。
冗長性＝意図の繰り返し
ただし意図的に冗長性を持たせたコード、バグが入り込んだ時に人が死ぬような場合、は例外。
ソーシャルメディアアプリケーション等は全く別の話。
大体はクリップボードから継承されると冗長性を持つ。

コード品質が私たちを導いてくれる
オブジェクトははっきりと定義された特徴を持ち自分の責任に注力し、実装を隠し、状態を管理し
一度だけ定義されるようにすべき。
・コードに凝集性があれば理解もバグを見つけるのも簡単
・コードの結合度が低ければエンティティ間の副作用が起こることもすくなく、再利用、拡張が簡単になる
・コードがうまくカプセル化されていれば複雑さを管理し呼び出し元が呼び出し先の実装詳細を知らなくてもよくなる。
・コードが断定的であることはふるまいを配置する場所は多くの場合依存データがある場所であることを示す
・コードが冗長でないことはバグ修正や変更を1箇所で1回だけやればよい
これらがなければテストは難しい＝テストがしやすいコードならコード品質は良い

明日のベロシティのために今日品質を上げる
明日のベロシティ（速さ）を上げるには今日コードの品質を上げるしかない。
技術的負債＝開発中に学習した内容をコードに反映しなかった場合に起きるもの
技術的負債以上に開発を遅くし見積りを狂わすものはない。

コードの品質を上げる7つの戦略
・品質の定義を明確にする
高品質のコードは明確で理解しやすく拡張が簡単でなければならない
・品質のためのプラクティスを共有する
・完璧主義を手放す
明確な受け入れ基準を持てば必要なものを作る上で役に立つ
・トレードオフを理解する
・やり方を隠す
呼び出し先のやりかたを隠して呼び出し元が欲しいものを得られるようにする
・良い名前を付ける
・コードをテスト可能に保つ

保守しやすいコードを書く7つの戦略
・コードの共同所有を取り入れる
チームの誰もがコードのどの部分でも変更して良い状況にする
・リファクタリングを熱心に行う
開発プロセスを通してずっと行うこと
・常時ペアで進める
知識を伝える上で最も速い方法
・頻繁にコードレビューを行う
・ほかの開発者のやり方を学ぶ
・ソフトウェア開発を学ぶ
・コードを読み書きしてコーディングの練習をする

まとめ
・凝集性のあるコードは副作用を減らす
・疎結合なコードはテストが容易である
・カプセル化されたコードは簡単に拡張できる
・断定的なコードによってソフトウェアがモジュール化される
・非冗長なコードは保守の問題を減らす