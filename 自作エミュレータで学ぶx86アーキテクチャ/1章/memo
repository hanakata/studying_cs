1章 C言語とアセンブリ言語

人はC言語で書かれたソースは理解できるがCPUにはできない。
　ではどうするか？
　→CPUは機械語の列だけを解釈できるので機械語に変換する。
ソースだけでなく全てのデータについて機械語（＝0か1）でしか読めない。
なぜか？
　→CPUやチップセットなどの電子回路がデジタル回路なので電圧の高低で情報を表し計算を行うため。
　ONOFFしかないので01しかない。01のみで情報を表す方法を2進数表示とも呼ぶ。

CPUに入力するためのきかいごプログラムはどこかに保存しておく方法が必要
→電圧の高低で表される電気信号はそのままでは記録えきない。
どうするか？
信号を変換する。
ハードディスクの場合・・・電圧の高低を磁石のNS極に対応させる
メモリの場合・・・電気がコンデンサにたまっているかを確認する
どの状態を0とするか1にするかは決まっていないので好きなように。ただし統一すること。

機械語は人間にとって非常に分かりにくいもの。
なので機械語と1対1で対応するにも関わらず人にとっても読みやすい言語が作られる
→アセンブリ言語
1対1というのはどういうことか？
どんな場面でもsub esp, byte +10と書けば83 ec 10と対応するということ。
これは逆も成り立つ。これに対してC言語だと同じ記述でも別の機械語になったりする。
アセンブリ言語と機械語が1対1にならない場合も少ないがある。
1つの機械語命令が複数のアセンブリ言語命令に対応するもの
→0x90がnopとxchg eax, eaxに対応する
複数の機械語命令が1つのアセンブリ言語命令に対応するもの
→0x40と0xff 0xc0がinc eaxに対応する。

機械語をアセンブリ言語で読む
→逆アセンブル、ディスアセンブルと呼ぶ
以下サイトに開発環境準備のファイルがある。
https://book.mynavi.jp/supportsite/detail/9784839954741.html
以下コマンドで機械語を取り出す
gcc -Wl,--entry=func,--oformat=binary -nostdlib -fno-asynchronous-unwind-tables -o casm-c-sample.bin casm-c-sample.c
-nostdlib -fno-asynchronous-unwind-tablesで例外処理用のデータや標準リンカを含まないようにする
-Wl,--entry=func,--oformat=binaryで純粋な機械語のみを出力する。
以下コマンドでアセンブリ言語表示
ndisasm -b 32 casm-c-sample.bin
00000000  55                push ebp
00000001  89E5              mov ebp,esp
00000003  83EC10            sub esp,byte +0x10
00000006  C745FC00000000    mov dword [ebp-0x4],0x0
0000000D  FF45FC            inc dword [ebp-0x4]
00000010  C9                leave
00000011  C3                ret
この方法で任意の機械語プログラムをアセンブリ言語に変換して読むことができる。
手元にC言語のソースコードがある場合は以下の方法も可能
gcc -c -g -o casm-c-sample.o casm-c-sample.c
objdump -d -S -M intel casm-c-sample.o

casm-c-sample.o:     file format elf32-i386


Disassembly of section .text:

00000000 <func>:
void func(void) {
   0:   55                      push   ebp
   1:   89 e5                   mov    ebp,esp
   3:   83 ec 10                sub    esp,0x10
  int val = 0;
   6:   c7 45 fc 00 00 00 00    mov    DWORD PTR [ebp-0x4],0x0
  val++;
   d:   ff 45 fc                inc    DWORD PTR [ebp-0x4]
}
  10:   c9                      leave
  11:   c3                      ret

00000000  55                push ebp
00000001  89E5              mov ebp,esp
00000003  83EC10            sub esp,byte +0x10
00000006  C745FC00000000    mov dword [ebp-0x4],0x0 //変数valを初期化する処理
0000000D  FF45FC            inc dword [ebp-0x4]//変数valをインクリメントする処理　dword [ebp-0x4]がval
00000010  C9                leave
00000011  C3                ret
プログラムは7つの命令から成っている。
関数の入り口での定型的な処理を行う命令（push,mov,sub）
変数valを初期化する命令(mov)
変数valをインクリメントする命令(inc)
関数の出口での定型的な処理を行う命令(leave、ret)
アセンブリ言語は1行に1命令で文法は以下
オペコード オペランド1,オペランド2
オペコードとオペランドを合わせたものをニーモニックと呼ぶ

まずmovから。
mov 移動先,移動元
という書き方になる。データは4バイトか、2バイトか1バイトでmovと言いつつもコピー。
例えば
mov ebp,esp
の場合、espの値をebpへコピーする。それぞれレジスタと呼ばれる記憶領域でCPUに内蔵されている。
esp=スタックポインタと呼ばれる。常にスタックの最新の読み書き位置を保持している。
スタックは広いデータ領域でスタックポインタはその1箇所を指し示すもの。
espは最新のものしかない＝今欲しいものは別のところにコピーする必要がある＝ebpにコピー
次のmov
mov dword [ebp-0x4],0x0
これは数値の0をebp-4番地から始まるメモリ上の32ビットの領域へコピーする。
コピー元に普通の数字を書けばコピー元ではなくコピーする値を直接指定できる。
なのでこの場合0x00000000がコピーされる。コピー元はこれ。
コピー先は。。。
・ebp-0x4＝コピー先のメモリ番地を計算する部分
・[]＝単なる数値ではなくメモリ番地だと意味する部分
・dword＝領域の大きさを指定する部分
メモリ番地とは？
データを記憶できる大きな領域＝メモリ
そのメモリを細かく分けて連番を振ったものがメモリ番地
データを記憶するためにCPUのレジスタ(ebp、esp)を利用したがメモリも利用可能。
メモリを読み書きするためには[]でメモリ番地を囲むことになっている。

00000001  89E5              mov ebp,esp
ここでebpにはスタックの最新の読み書き位置が設定されている。
00000006  C745FC00000000    mov dword [ebp-0x4],0x0
ここでebp-4にあるからebpより前方4つずれた位置に変数valがある。
そのためebp-4が変数valの先頭位置となる。
これはコンパイラが勝手に選んだことなのでコンパイラによって異なる可能性はある。

変数の位置を表す数値を[]で囲むことでその数値がメモリ番地であると意味付けできる。
なので[ebp-4]とかけば数値としてのebp-4ではなくそれが指すメモリ領域を表せる。
さらにdwordを付けることによりその領域の大きさが32ビットであることを示すことができる。
アセンブリ言語ではあるメモリ領域を指定するために先頭の番地とその領域の大きさが必要。

つぎにinc命令。
inc命令はオペランドにインクリメント対象を指定する。
inc インクリメント対象
例のプログラムだと
0000000D  FF45FC            inc dword [ebp-0x4]
変数valはdword [ebp-0x4]なので変数valに1だけ加算する
inc命令は2つの機械語命令が1つのアセンブリ言語命令に対応している
一つは0x40、もう一つは0xff
今回の場合FFなので0xffが利用されている。
あとの0x45 0xfcは？
0xff＝オペコード＝命令がincであること
0x45＝ModR/M＝メモリ領域の位置の決め方（位置自体ではないことに注意）ebp + 8ビットディスプレースメントで示される番地のメモリ領域
0xfc＝ディスプレースメント＝位置の差分のこと。ebpにディスプレースメントを加算した値を最終的な番地とする。
なので
0xff＝inc命令
0x45＝[ebp + 8ビットディスプレースメント]
0xfc＝-4
なのでinc dword [ebp-4]になる。


